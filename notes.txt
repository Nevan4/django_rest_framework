Starting django project:

This project will contain backend and client side both in drf folder.

to start project in backend folder using django:
django-admin.exe startproject cfehome . #name can be different

next create a Python API Client in py_client folder (to analyze results of the coded scripts
simultaneously from backend and client side)

Note #1:
REST APIs = web based APIs

--- last done  ---
finished yt video at 21:33
in basic.py
using "try except" conditional to handle the problem with
response.json() method to print response in json format.
--- last done ---

------------------------------------------------------------
26.05.2023
------------------------------------------------------------

--- last done  ---
finished yt at 31:09
Checked runserver and response
--- last done ---

------------------------------------------------------------
29.05.2023
------------------------------------------------------------

Starting first API:

in terminal in project folder:
python manage.py startapp <api_name>

! remember to add new app to settings.py in installed apps

In api view created first view with the simple response
Next - added file in api folder called "urls.py" to simplify the routing
(all addresses from this api will be located in api catalog)


--- last done  ---
finished yt at 47:09
Checked how params given in get request are echoed in api view
$    data['params'] = dict(request.GET)
--- last done ---

------------------------------------------------------------
31.05.2023
------------------------------------------------------------

Starting new chapter in tutorial - Model Instance as an API Response

Started new app: products
added app in settings
created simple model Product
 updated database:
    python manage.py makemigrations
    python manage.py migrate

to be continued (48:41)

------------------------------------------------------------
03.06.2023
------------------------------------------------------------

Using django python shell
added some models

------------------------------------------------------------
04.06.2023
------------------------------------------------------------

In views.py added import:
from django.forms.models import model_to_dict

Now instead of assigning values from "model_data"
one by once to every data key
(i.e. data['title'] = model_data.title)
we can just use the model_to_dict(model_data) method

finished at 1:04:27

------------------------------------------------------------
05.06.2023
------------------------------------------------------------
Added in models.py @property sale_price
and get_discount
Created serializers.py file in products
created first ProductSerializer using Meta class and
Product as a model with all the fields selected one by one
Changed in basic.py method of getting the response with .json method
using try: statement again as before
in views.py changed the "model_data" into "instance" as it better
handles the serializers usage and used the serializer as below:
data = ProductSerializer(instance).data


finished at 1:09:51

------------------------------------------------------------
12.06.2023
------------------------------------------------------------

In serializers.py changed one name of the fields
from get_discount to my_discount
To make this works - added my_discount param in main class
ProductSerializer and assign to it serializer method:
my_discount = serializers.SerializerMethodField(read_only=True)
Next added method in that class called "get_my_discount":
def get_my_discount(self, obj):
    return obj.get_discount()

To get the access to get_discount method from model Product.

(note: while added only 'my_discount' field with "my_discount"
param in ProductSerializer it failed with error because it was
looking for get_my_discount

finished at 1:15:14 video on YT, starting the part "injest data "

------------------------------------------------------------
12.07.2023
------------------------------------------------------------
Finished at 1:27:04 - starting with Generics RetrieveAPIView

ADD NOTES what have been done:
short: added post method (biggest changes in views, serializers and basic.py)

------------------------------------------------------------
23.07.2023
------------------------------------------------------------
Starting Generics RetrieveAPIView

Add view endpoint in products/views that can show the details of
the products based on the pk given (item id).
Use RetrieveAPIView from generics to make a queryset

Add urls.py to handle the new ulr endpoints

In main urls added:
path('api/products/', include('products.urls')),
to include the new urls from products category

finished at 1:35:54

------------------------------------------------------------
24.07.2023
------------------------------------------------------------
Add ProductListCreateAPIView in views.py
that can handle both Create or List View.
When a GET request is made to the endpoint from ListCreateAPIView
it returns objects from the queryset in the view's queryset attribute.
When a POST request is made it creates a new object using the data provided
in the request body.

------------------------------------------------------------
24.07.2023
------------------------------------------------------------

Started at 1:44:35

finished Using Function Based Views For Create Retrieve or List
watch again and make some notes.
Short note: Using Function based views there was created a view
that can handle create list and detail.

Function based view can handle multiple scenarios but code is big
and not sorted so it can be a little bit confusing to put all that
in one function based view.

finished at 1:55:17

------------------------------------------------------------
29.07.2023
------------------------------------------------------------
Starting with UpdateAPIView & DestroyAPIView

Added update and delete (destroy) view to update or deleting
products.
update uses request.put
delete uses request.delete

finished at 2:04:04

------------------------------------------------------------
30.07.2023
------------------------------------------------------------
Starting with Mixins and Generic API View

Difference between generic views and function based views
is that here we do not define the conditions for the
methods, instead we define function for the request method.

finished at 2:14:55 - almost finished topic
by mixins added list, detail and create (with perform create option)

------------------------------------------------------------
10.09.2023
------------------------------------------------------------
Session Authentication & Permissions

In ListCreateApiView added
permission_classes to implement authentication requirement
then added authentication_classes to handle the authentication possible
In backend used manage.py createsuperuser with name kacper and p 123


